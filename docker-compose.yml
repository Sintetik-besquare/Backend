version: "3.2"
services:
  backend_services:
    build:
      context: ./main_service
    depends_on:
      - postgres
      - redis
    networks:
      - network
    environment:
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=sintetik
      - SECRET=${SECRET}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - EMAIL_SENDER=${EMAIL_SENDER}
      - EMAIL_BASE_URL=${EMAIL_BASE_URL}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "3001:3001"
    container_name: mainservice
    tty: true

  feed_service:
    build:
      context: ./feed_service
    depends_on:
      - postgres
      - redis
    networks:
      - network
    environment:
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=sintetik
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "3002:3002"
    container_name: feedservice
    tty: true

  redis:
    restart: always
    image: "redis:7.0.0"
    networks:
      - network
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - ../redis_mount:/data
    container_name: redis
    tty: true

  postgres:
    restart: always
    image: postgres:13-alpine
    networks:
      - network
    volumes:
      - ../db_mount:/var/lib/postgresql/data
      - ./db_init/:/docker-entrypoint-initdb.d/
    environment:
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=sintetik
    container_name: projectdb

networks:
  network:

    
